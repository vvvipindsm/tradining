//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+

#property version   "1.00"
#include <Trade/Trade.mqh>
input double Lots = 0.01;
input int TpPoints= 100;
input int SlPoints = 100;

input int StochKPeriod = 5;
input int StochDPeriod = 3;
input int StochSlowing = 3;

input ENUM_MA_METHOD StochMethod = MODE_SMA;
input ENUM_STO_PRICE StochPriceField = STO_LOWHIGH;
input double StochUpperBound= 80;
input double StochLowerBound = 20;
int handle;
int totalBars;
CTrade trade;


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   totalBars = iBars(_Symbol, PERIOD_CURRENT);
   handle = iStochastic(_Symbol, PERIOD_CURRENT, StochKPeriod, StochDPeriod, StochSlowing, StochMethod, StochPriceField);
   return(INIT_SUCCEEDED);
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---

  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {
   for(int i = PositionsTotal()-1; i >= 0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
         double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
         double posOpenPrice = PositionGetDouble(POSITION_PRICE_OPEN);
         double posSl = PositionGetDouble(POSITION_SL);
         double posTp = PositionGetDouble(POSITION_TP);
         ENUM_POSITION_TYPE posType = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
         if(posType == POSITION_TYPE_BUY)
           {
            double possibleWin = posTp - bid;
            double newSl = bid - possibleWin;
            newSl =  NormalizeDouble(newSl,_Digits);
            if(newSl > posSl)
              {
               if(trade.PositionModify(ticket, newSl, posTp))
                 {
                  Print("Position #", ticket," was modified by tsl...");
                 }
              }
           }
         else
            if(posType == POSITION_TYPE_SELL)
              {
               double possibleWin = ask - posTp;
               double newSl = ask + possibleWin;
               newSl =NormalizeDouble(newSl,_Digits);

               if(newSl < posSl | posSl == 0)
                 {
                  if(trade.PositionModify(ticket, newSl, posTp))
                    {


                     Print("Position #", ticket," was modified by tsl...");

                    }
                 }


              }



        }
     }


   int bars = iBars(_Symbol, PERIOD_CURRENT);
   if(totalBars != bars)
     {
      totalBars = bars;
      double stoch[];
      double signal[];
  
      CopyBuffer(handle, 0, 1, 2, stoch);
      CopyBuffer(handle, 1, 1, 2, signal);
      if(stoch[1] > signal [1] && stoch [0] < signal [0])
        {
         Print("Buy Crossover");
         if(stoch[1] <= StochLowerBound || signal[1] <= StochLowerBound)
           {
            Print("Buy Signal");
            double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
            ask = NormalizeDouble(ask,_Digits);
            double sl= ask - SlPoints * _Point;
            sl = NormalizeDouble(sl,_Digits);
            double tp = ask + TpPoints * _Point;
            tp = NormalizeDouble(tp,_Digits);
            trade.Buy(Lots,_Symbol, ask, sl, tp);
           }
        }
      else
         if(stoch[1] < signal [1] && stoch [0] > signal [0])
           {
            Print("Sell Crossover");
            if(stoch [1] >= StochUpperBound || signal [1] >= StochUpperBound)
              {
               Print("Sell Signal");
               double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
               bid = NormalizeDouble(bid,_Digits);
               double sl= bid + SlPoints *_Point;
               sl = NormalizeDouble(sl,_Digits);
               double tp = bid - TpPoints * _Point;
               tp = NormalizeDouble(tp,_Digits);
               trade.Sell(Lots, _Symbol, bid, sl, tp);


              }
           }
     }
  }


//+------------------------------------------------------------------+
